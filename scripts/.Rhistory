plotPrefix <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/../figures/")
ggsave(IBI_plot, file=paste0(plotPrefix, "Figure_IBI.jpeg"), width = 3000, height = 1500, dpi = 300, units = "px")
emmeans0.1$contrasts
## LINEPLOT
IBI_plot <- ggplot(emm0.1, aes(x=IBIno, y=emmean, color=Block)) +
geom_point(size = 2) +
geom_line(aes(linetype = Block, group = Block),size = 1)+
geom_errorbar(width=.125, aes(ymin=emmean-SE, ymax=emmean+SE), position=pd)+
geom_hline(yintercept=0, linetype="dashed")+
scale_colour_manual(values=cbPalette)+
scale_linetype_manual(values=c("dashed", "solid")) +
theme_bw(base_size = 8)+
theme(legend.position="bottom")+
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
labs(y = "Delta IBI (ms)", x = "IBI no.")+
annotate(geom="text", x=xplotPosition - 1, y=mean(emm0.1$emmean[11:12]), label="*", color="#000000")+ #IBI2
annotate(geom="text", x=xplotPosition, y=mean(emm0.1$emmean[13:14]), label="**", color="#000000")+ #IBI3
annotate(geom="text", x=xplotPosition + 1, y=mean(emm0.1$emmean[15:16]), label="**", color="#000000")+ #IBI4
annotate(geom="text", x=xplotPosition + 2, y=mean(emm0.1$emmean[17:18]), label="***", color="#000000")+ #IBI5
annotate(geom="text", x=xplotPosition + 3, y=mean(emm0.1$emmean[19:20]), label="***", color="#000000")+ #IBI6
annotate(geom="text", x=xplotPosition + 4, y=mean(emm0.1$emmean[21:22]), label="**", color="#000000")+ #IBI7
theme(axis.text.x = element_text(size = 16))+ # X Axis ticks
theme(axis.text.y = element_text(size = 10))+ # Y axis ticks
theme(axis.title = element_text(size = 16))+ # Axis titles
theme(legend.text = element_text(size = 16))+ # Legend text
theme(legend.title = element_text(size = 14))+ # Legend title
plot_theme_apa()+
scale_x_discrete(labels=c("-3", "-2(r)", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8"))+
theme(
axis.text.x=element_text(size=rel(3)),
axis.text.y=element_text(size=rel(2)),
axis.title.y=element_text(size=rel(1)),
axis.title.x = element_text(size=rel(1)),
# legend.position = "bottom",
legend.position = c(.8,.85),
legend.title = element_blank()
)
IBI_plot
ggsave(IBI_plot, file=paste0(plotPrefix, "Figure_IBI.jpeg"), width = 3000, height = 1500, dpi = 300, units = "px")
Anova(d0.1, type = 'III')
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
library(yarrr)
library(lme4)
library(emmeans)
library(pander)
library(reshape)
library(pander)
library(dplyr)
library(arrow)
library(car)
library(ggplot2)
library(effects)
library(ggsignif)
library(gridExtra)
library(viridis)
IBIlength = "big"
# Set and Get directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
BASEPATH <- "D:/Data/EEG_Study_1/aligned_data/features/"
plotPrefix <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/../figures/")
IBIdata <-
as.data.frame(read_parquet("../loc_data/df_tot_merged_ibi_pos_-2.parquet"))
agesex <-
as.data.frame(read.csv(paste0(BASEPATH, "SexAge.csv")))
agesex$user <- agesex$participantNum # Rename pptnum column for succesful merge
agesex <- subset(agesex, select = -c(participantNum, Sex)) # Drop irrelevent columns to not cloud the dataframe
IBIdata <- merge(IBIdata, agesex, by = c("user"))
##### Data cleanup #####
# Compute dataframe with relevant variables
data <- data.frame(IBIdata[,c("user", "answered_correctly", "answered_in_time", "Running[Trial]",  "Trial", "Procedure[Block]", "sex", "Age", "answered_correctly")], select(IBIdata,contains("IBI_pos")))
groupingVars <- c("pptNum", "answered_correctly", "answered_in_time", "subBlock", "Trial", "Block", "Sex", "Age", "Correct") # Give easier to use names
names(data)[1:9] <- groupingVars
View(data)
View(IBIdata)
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
library(yarrr)
library(lme4)
library(emmeans)
library(pander)
library(reshape)
library(pander)
library(dplyr)
library(arrow)
library(car)
library(ggplot2)
library(effects)
library(ggsignif)
library(gridExtra)
library(viridis)
IBIlength = "big"
# Set and Get directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
BASEPATH <- "D:/Data/EEG_Study_1/aligned_data/features/"
plotPrefix <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/../figures/")
IBIdata <-
as.data.frame(read_parquet("../loc_data/df_tot_merged_ibi_pos_-2.parquet"))
agesex <-
as.data.frame(read.csv(paste0(BASEPATH, "SexAge.csv")))
agesex$user <- agesex$participantNum # Rename pptnum column for succesful merge
agesex <- subset(agesex, select = -c(participantNum, Sex)) # Drop irrelevent columns to not cloud the dataframe
IBIdata <- merge(IBIdata, agesex, by = c("user"))
##### Data cleanup #####
# Compute dataframe with relevant variables
data <- data.frame(IBIdata[,c("user", "answered_correctly", "answered_in_time", "Running[Trial]",  "Trial", "Procedure[Block]", "sex", "Age", "answered_correctly")], select(IBIdata,contains("IBI_pos")))
groupingVars <- c("pptNum", "answered_correctly", "answered_in_time", "subBlock", "Trial", "Block", "Sex", "Age", "Correct") # Give easier to use names
names(data)[1:9] <- groupingVars
# Factorize relevant variables and clean up data
data$pptNum <- as.factor(data$pptNum)
data$answered_correctly <- as.factor(data$answered_correctly)
data$answered_in_time <- as.factor(data$answered_in_time)
data$subBlock <- as.factor(data$subBlock)
data$Trial <- as.factor(data$Trial)
data$Block[data$Block == "Controle"] = "Neutral"
data$Block[data$Block == "Stress"] = "Negative"
data$Block <- factor(data$Block, levels = c("Neutral", "Negative"))
data$Sex <- as.factor(data$Sex)
data$Correct <- as.factor(data$Correct)
data$answered_in_time <- as.factor(data$answered_in_time)
data$subBlock <- as.factor(data$subBlock)
data <- data[is.na(data$IBI_pos.2) == FALSE, ] # Take out all NA's for IBI's
data <- data[data$answered_in_time == TRUE, ] # Take out the timed-out trials
sprintf("Length of all data is: %.0f, and remaining size after removing NA is: %.0f", nrow(IBIdata), nrow(data))
dataBackup <- data #backup the data
data <- melt(dataBackup, id.vars = groupingVars) # Get it to long format
names(data)[names(data) == "variable"] <- "IBIno"
names(data)[names(data) == "value"] <- "IBIdelta_ms"
if(IBIlength == "small"){
# Create a plotting variable from IBI-4 for clarity in the viz
plotdata = data[!(data$IBIno=="IBI_pos.7" | data$IBIno=="IBI_pos.6" | data$IBIno=="IBI_pos.5"), ]
# But create a stats dataframe where the irrelevant datapoint will not be considered
data = data[!(data$IBIno=="IBI_pos.7" | data$IBIno=="IBI_pos.6" | data$IBIno=="IBI_pos.5" | data$IBIno=="IBI_pos.4" | data$IBIno=="IBI_pos.3" | data$IBIno=="IBI_pos.2" | data$IBIno=="IBI_pos.1"), ]
} else if (IBIlength == "big"){
data = data[!(data$IBIno=="IBI_pos.7" | data$IBIno=="IBI_pos.6" | data$IBIno=="IBI_pos.5" | data$IBIno=="IBI_pos.4"), ]
}
levels(data$IBIno) = c("-7","-6","-5","-4","-3","-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8")
data$IBIno <- as.factor(data$IBIno)
data$IBIno <- as.ordered(data$IBIno)
# Sample descriptives
t.first <- data[match(unique(data$pptNum), data$pptNum),] # Create dataframe with one line per unique participant
sprintf("Number of participants: %.f", nrow(t.first))
sprintf("Number of Men: %.f. Number of Women: %.f.", sum(t.first$Sex == 'M') , sum(t.first$Sex == 'F'))
sprintf("Age, Mean: %.2f, SD: %.2f.", mean(t.first$Age) , sd(t.first$Age))
write.csv(t.first, "../loc_data/temp/IDsIBI.csv", row.names = FALSE)
View(data)
data$Condition = data$Block
# Full formula
formula <- IBIdelta_ms ~ Condition * IBIno + (1|pptNum)
d0.1 <- lmer(formula,data=data) # Fit the lmer
Anova(d0.1, type = 'III')
plot(effect("Block:IBIno", d0.1)) #just to check
plot(effect("Condition:IBIno", d0.1)) #just to check
# emmeans(d0.1, pairwise ~ Block | IBIno, adjust ="fdr", type = "response")
emmeans0.1 <- emmeans(d0.1, pairwise ~ Condition | IBIno, adjust ="fdr", type = "response") # Compute a variable containing all emmeans/contrasts
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
#### Visualisation ####
pd <- position_dodge(0.05) # To prevent errorbars overlapping, use position_dodge to move them horizontally - move them .05 to the left and right
print("Significant interaction effect Condition and IBIno ")
if(IBIlength == "small"){
xplotPosition = 4.1
} else if(IBIlength == "big"){
xplotPosition = 7.1
}
cbPalette <- c("#56B4E9", "#E69F00")
## LINEPLOT
IBI_plot <- ggplot(emm0.1, aes(x=IBIno, y=emmean, color=Condition)) +
geom_point(size = 2) +
geom_line(aes(linetype = Condition, group = Condition),size = 1)+
geom_errorbar(width=.125, aes(ymin=emmean-SE, ymax=emmean+SE), position=pd)+
geom_hline(yintercept=0, linetype="dashed")+
scale_colour_manual(values=cbPalette)+
scale_linetype_manual(values=c("dashed", "solid")) +
theme_bw(base_size = 8)+
theme(legend.position="bottom")+
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
labs(y = "Delta IBI (ms)", x = "IBI no.")+
annotate(geom="text", x=xplotPosition - 1, y=mean(emm0.1$emmean[11:12]), label="*", color="#000000")+ #IBI2
annotate(geom="text", x=xplotPosition, y=mean(emm0.1$emmean[13:14]), label="**", color="#000000")+ #IBI3
annotate(geom="text", x=xplotPosition + 1, y=mean(emm0.1$emmean[15:16]), label="**", color="#000000")+ #IBI4
annotate(geom="text", x=xplotPosition + 2, y=mean(emm0.1$emmean[17:18]), label="***", color="#000000")+ #IBI5
annotate(geom="text", x=xplotPosition + 3, y=mean(emm0.1$emmean[19:20]), label="***", color="#000000")+ #IBI6
annotate(geom="text", x=xplotPosition + 4, y=mean(emm0.1$emmean[21:22]), label="**", color="#000000")+ #IBI7
theme(axis.text.x = element_text(size = 16))+ # X Axis ticks
theme(axis.text.y = element_text(size = 10))+ # Y axis ticks
theme(axis.title = element_text(size = 16))+ # Axis titles
theme(legend.text = element_text(size = 16))+ # Legend text
theme(legend.title = element_text(size = 14))+ # Legend title
plot_theme_apa()+
scale_x_discrete(labels=c("-3", "-2(r)", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8"))+
theme(
axis.text.x=element_text(size=rel(3)),
axis.text.y=element_text(size=rel(2)),
axis.title.y=element_text(size=rel(1)),
axis.title.x = element_text(size=rel(1)),
# legend.position = "bottom",
legend.position = c(.8,.85),
legend.title = element_blank()
)
# Load document where functions are stored
source("functions.R")
## LINEPLOT
IBI_plot <- ggplot(emm0.1, aes(x=IBIno, y=emmean, color=Condition)) +
geom_point(size = 2) +
geom_line(aes(linetype = Condition, group = Condition),size = 1)+
geom_errorbar(width=.125, aes(ymin=emmean-SE, ymax=emmean+SE), position=pd)+
geom_hline(yintercept=0, linetype="dashed")+
scale_colour_manual(values=cbPalette)+
scale_linetype_manual(values=c("dashed", "solid")) +
theme_bw(base_size = 8)+
theme(legend.position="bottom")+
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
labs(y = "Delta IBI (ms)", x = "IBI no.")+
annotate(geom="text", x=xplotPosition - 1, y=mean(emm0.1$emmean[11:12]), label="*", color="#000000")+ #IBI2
annotate(geom="text", x=xplotPosition, y=mean(emm0.1$emmean[13:14]), label="**", color="#000000")+ #IBI3
annotate(geom="text", x=xplotPosition + 1, y=mean(emm0.1$emmean[15:16]), label="**", color="#000000")+ #IBI4
annotate(geom="text", x=xplotPosition + 2, y=mean(emm0.1$emmean[17:18]), label="***", color="#000000")+ #IBI5
annotate(geom="text", x=xplotPosition + 3, y=mean(emm0.1$emmean[19:20]), label="***", color="#000000")+ #IBI6
annotate(geom="text", x=xplotPosition + 4, y=mean(emm0.1$emmean[21:22]), label="**", color="#000000")+ #IBI7
theme(axis.text.x = element_text(size = 16))+ # X Axis ticks
theme(axis.text.y = element_text(size = 10))+ # Y axis ticks
theme(axis.title = element_text(size = 16))+ # Axis titles
theme(legend.text = element_text(size = 16))+ # Legend text
theme(legend.title = element_text(size = 14))+ # Legend title
plot_theme_apa()+
scale_x_discrete(labels=c("-3", "-2(r)", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8"))+
theme(
axis.text.x=element_text(size=rel(3)),
axis.text.y=element_text(size=rel(2)),
axis.title.y=element_text(size=rel(1)),
axis.title.x = element_text(size=rel(1)),
# legend.position = "bottom",
legend.position = c(.8,.85),
legend.title = element_blank()
)
IBI_plot
emmeans0.1$contrasts
##############################
#                            #
#     Audio Analysis V1      #
#       Cyberball-MIST       #
#                            #
#############################
#
# Author: Mitchel Kappen
# 6-4-2022
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
# Set and Get directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
nAGQ = 1
# BASEPATH <- "Z:/shares/ghep_lab/2021_VanhollebekeKappen_EEGStudy2_MIST_Cyberball_Audio/"
BASEPATH <- "D:/Data/EEG_Study_2/"
plotPrefix <- paste0(BASEPATH, "Data/Interim/Audio/figures/")
audioData <-
as.data.frame(read_parquet(paste0(BASEPATH,"Data/Raw/Audio/df_gemaps_func.parquet")))
audioData <- audioData %>%
transform(participantNum = as.factor(participantNum),
taskType = as.factor(taskType),
descriptionType = as.factor(descriptionType),
experimentPhase = as.factor(experimentPhase))
# This is easier to work with to plot over time
audioData$fileNum[audioData$fileName == "audio_picture_baseline.wav"] = "baseline"
audioData$fileNum[audioData$fileName == "audio_referential_control.wav"] = "control"
audioData$fileNum[audioData$fileName == "audio_picture_control.wav"] = "control rest"
audioData$fileNum[audioData$fileName == "audio_referential_stress.wav"] = "stress"
audioData$fileNum[audioData$fileName == "audio_picture_stress.wav"] = "stress rest"
audioData$fileNum <- ordered(audioData$fileNum, levels = c('baseline', 'control', 'control rest', 'stress', 'stress rest'))
summary(audioData)
View(audioData)
questionData <- as.data.frame(read.csv("/../loc_data/dataComplete.csv"))
# Set and Get directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
questionData <- as.data.frame(read.csv("/../loc_data/dataComplete.csv"))
questionData <- as.data.frame(read.csv("../loc_data/dataComplete.csv"))
questionData <- as.data.frame(read.csv("../loc_data/QuestionnaireResults.csv"))
View(questionData)
questionData$participantNum = questionData$Participant.Number
test = merge(audioData, questionData, by = "participantNum")
View(test)
##############################
#                            #
#     Audio Analysis V1      #
#       Cyberball-MIST       #
#                            #
#############################
#
# Author: Mitchel Kappen
# 6-4-2022
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
# Set and Get directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
nAGQ = 1
# BASEPATH <- "Z:/shares/ghep_lab/2021_VanhollebekeKappen_EEGStudy2_MIST_Cyberball_Audio/"
BASEPATH <- "D:/Data/EEG_Study_2/"
plotPrefix <- paste0(BASEPATH, "Data/Interim/Audio/figures/")
##### Loading data #####
audioData <-
as.data.frame(read_parquet(paste0(BASEPATH,"Data/Raw/Audio/df_gemaps_func.parquet")))
questionData <- as.data.frame(read.csv("../loc_data/QuestionnaireResults.csv"))
questionData$participantNum = questionData$Participant.Number
audioData = merge(audioData, questionData, by = "participantNum")
audioData <- audioData %>%
transform(participantNum = as.factor(participantNum),
taskType = as.factor(taskType),
descriptionType = as.factor(descriptionType),
experimentPhase = as.factor(experimentPhase),
Sex = as.factor(Sex))
# This is easier to work with to plot over time
audioData$fileNum[audioData$fileName == "audio_picture_baseline.wav"] = "baseline"
audioData$fileNum[audioData$fileName == "audio_referential_control.wav"] = "control"
audioData$fileNum[audioData$fileName == "audio_picture_control.wav"] = "control rest"
audioData$fileNum[audioData$fileName == "audio_referential_stress.wav"] = "stress"
audioData$fileNum[audioData$fileName == "audio_picture_stress.wav"] = "stress rest"
audioData$fileNum <- ordered(audioData$fileNum, levels = c('baseline', 'control', 'control rest', 'stress', 'stress rest'))
summary(audioData)
formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ fileNum * taskType + (1|participantNum)' # Declare formula
dataModel = audioData # Ensure correct data is taken
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# Model Selection
modelNames = c(d0.1,d0.2,d0.3)
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
plot(effect("fileNum:taskType", chosenModel[[1]]))
formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ fileNum * taskType + Sex + (1|participantNum)' # Declare formula
dataModel = audioData # Ensure correct data is taken
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# Model Selection
modelNames = c(d0.1,d0.2,d0.3)
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
plot(effect("fileNum:taskType", chosenModel[[1]]))
View(audioData)
###### Speech features: Jitter ######
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ fileName * taskType + (1|participantNum)' # Declare formula
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ experimentPhase + (1|participantNum)' # Declare formula
formula <- 'jitterLocal_sma3nz_amean ~ fileNum * taskType + Sex + (1|participantNum)' # Declare formula
dataModel = audioData # Ensure correct data is taken
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# Model Selection
modelNames = c(d0.1,d0.2,d0.3)
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
plot(effect("fileName:taskType", chosenModel[[1]]))
plot(effect("experimentPhase", chosenModel[[1]]))
plot(effect("fileNum:taskType", chosenModel[[1]]))
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ taskType | fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
###### Speech features: Shimmer ######
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ fileName * taskType + (1|participantNum)' # Declare formula
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ experimentPhase + (1|participantNum)' # Declare formula
formula <- 'shimmerLocaldB_sma3nz_amean ~ fileNum * taskType + Sex + (1|participantNum)' # Declare formula
dataModel = audioData # Ensure correct data is taken
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# Model Selection
modelNames = c(d0.1,d0.2,d0.3)
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
plot(effect("fileName:taskType", chosenModel[[1]]))
plot(effect("experimentPhase", chosenModel[[1]]))
plot(effect("fileNum:taskType", chosenModel[[1]]))
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ taskType | fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
###### Speech features: HNR ######
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ fileName * taskType + (1|participantNum)' # Declare formula
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ experimentPhase + (1|participantNum)' # Declare formula
formula <- 'HNRdBACF_sma3nz_amean ~ fileNum * taskType + Sex + (1|participantNum)' # Declare formula
dataModel = audioData # Ensure correct data is taken
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# Model Selection
modelNames = c(d0.1,d0.2,d0.3)
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
plot(effect("fileName:taskType", chosenModel[[1]]))
plot(effect("experimentPhase", chosenModel[[1]]))
plot(effect("fileNum:taskType", chosenModel[[1]]))
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ taskType | fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
###### Speech features: mean seg length ######
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ fileName * taskType + (1|participantNum)' # Declare formula
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ experimentPhase + (1|participantNum)' # Declare formula
formula <- 'MeanVoicedSegmentLengthSec ~ fileNum * taskType + Sex + (1|participantNum)' # Declare formula
dataModel = audioData # Ensure correct data is taken
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# Model Selection
modelNames = c(d0.1,d0.2,d0.3)
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
plot(effect("fileName:taskType", chosenModel[[1]]))
plot(effect("experimentPhase", chosenModel[[1]]))
plot(effect("fileNum:taskType", chosenModel[[1]]))
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ taskType | fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
###### Speech features: voiced segs per sec ######
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ fileName * taskType + (1|participantNum)' # Declare formula
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ experimentPhase + (1|participantNum)' # Declare formula
formula <- 'VoicedSegmentsPerSec ~ fileNum * taskType + Sex + (1|participantNum)' # Declare formula
dataModel = audioData # Ensure correct data is taken
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# Model Selection
modelNames = c(d0.1,d0.2,d0.3)
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
plot(effect("fileName:taskType", chosenModel[[1]]))
plot(effect("experimentPhase", chosenModel[[1]]))
plot(effect("fileNum:taskType", chosenModel[[1]]))
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ taskType | fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
###### Speech features: voiced segs per sec ######
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ fileName * taskType + (1|participantNum)' # Declare formula
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ experimentPhase + (1|participantNum)' # Declare formula
formula <- 'VoicedSegmentsPerSec ~ fileNum * taskType + Sex + (1|participantNum)' # Declare formula
dataModel = audioData # Ensure correct data is taken
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
###### Speech features: voiced segs per sec ######
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ fileName * taskType + (1|participantNum)' # Declare formula
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ experimentPhase + (1|participantNum)' # Declare formula
formula <- 'VoicedSegmentsPerSec ~ fileNum * taskType + Sex + (1|participantNum)' # Declare formula
dataModel = audioData # Ensure correct data is taken
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# Model Selection
modelNames = c(d0.1,d0.2,d0.3)
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
plot(effect("fileName:taskType", chosenModel[[1]]))
plot(effect("experimentPhase", chosenModel[[1]]))
plot(effect("fileNum:taskType", chosenModel[[1]]))
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ taskType | fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
Anova(chosenModel[[1]], type = 'III')
plot(effect("fileNum", chosenModel[[1]]))
###### Speech features: mean seg length ######
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ fileName * taskType + (1|participantNum)' # Declare formula
# formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ experimentPhase + (1|participantNum)' # Declare formula
formula <- 'MeanVoicedSegmentLengthSec ~ fileNum * taskType + Sex + (1|participantNum)' # Declare formula
dataModel = audioData # Ensure correct data is taken
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# Model Selection
modelNames = c(d0.1,d0.2,d0.3)
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
plot(effect("fileNum", chosenModel[[1]]))
chosenModel[[1]]
tabel
Anova(d0.3, type = 'III')
plot(effect("fileNum", d0.3))
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
