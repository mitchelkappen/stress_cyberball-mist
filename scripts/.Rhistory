show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
ggplot(diamonds, aes(cut, carat)) +
geom_flat_violin()
#' @rdname ggplot2-ggproto
#' @format NULL
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
ggproto("GeomFlatViolin", Geom,
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data, xminv = x,
xmaxv = x + violinwidth * (xmax - x))
# Make sure it's sorted properly to draw the outline
newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y))
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data, xminv = x,
xmaxv = x + violinwidth * (xmax - x))
# Make sure it's sorted properly to draw the outline
newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y))
"%||%" <- function(a, b) {
if (!is.null(a)) a else b
}
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data, xminv = x,
xmaxv = x + violinwidth * (xmax - x))
# Make sure it's sorted properly to draw the outline
newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y))
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1,])
ggplot2:::ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"),
required_aes = c("x", "y")
)
"%||%" <- function(a, b) {
if (!is.null(a)) a else b
}
plot <- stateplot(allData, summary(emmeans0.2)$emmeans, 'VAS_PAA', 'PAA')
plot
source("functions.R")
plot <- stateplot(allData, summary(emmeans0.2)$emmeans, 'VAS_PAA', 'PAA')
plot
source("functions.R")
plot <- stateplot(allData, summary(emmeans0.2)$emmeans, 'VAS_PAA', 'PAA')
plot
figureAA
source("functions.R")
plot <- stateplot(allData, summary(emmeans0.2)$emmeans, 'VAS_PAA', 'PAA')
plot
plot <- stateplot(allData, summary(emmeans0.2)$emmeans, 'VAS_PAA', 'PAA')+
# Control
geom_segment(aes(x =1, y = max_y+max_y/50, xend = 1.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
annotate('text', x=1.05, y=max_y + max_y/100+max_y/50, label='**', size=7)+
geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.1, yend = max_y+max_y/15), size= 1)+ # top line
annotate('text', x=1, y=max_y+max_y/15+max_y/100, label='***', size=7)+
# Stress
geom_segment(aes(x =1.9, y = max_y, xend = 2, yend = max_y), size= 1)+ # bottom first line
annotate('text', x=1.95, y=max_y+max_y/100, label='*', size=7)+
geom_segment(aes(x =2, y = max_y+max_y/50, xend = 2.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
annotate('text', x=2.05, y=max_y + max_y/100+max_y/50, label='***', size=7)+
# Within
geom_segment(aes(x =1.9, y = max_y+max_y/15, xend = 2.1, yend = max_y+max_y/15), size= 1)+ # top line
annotate('text', x=2, y=max_y+max_y/15+max_y/100, label='***', size=7)
# Try violin plots
max_y<-max(allData$VAS_PAA)
plot <- stateplot(allData, summary(emmeans0.2)$emmeans, 'VAS_PAA', 'PAA')+
# Control
geom_segment(aes(x =1, y = max_y+max_y/50, xend = 1.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
annotate('text', x=1.05, y=max_y + max_y/100+max_y/50, label='**', size=7)+
geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.1, yend = max_y+max_y/15), size= 1)+ # top line
annotate('text', x=1, y=max_y+max_y/15+max_y/100, label='***', size=7)+
# Stress
geom_segment(aes(x =1.9, y = max_y, xend = 2, yend = max_y), size= 1)+ # bottom first line
annotate('text', x=1.95, y=max_y+max_y/100, label='*', size=7)+
geom_segment(aes(x =2, y = max_y+max_y/50, xend = 2.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
annotate('text', x=2.05, y=max_y + max_y/100+max_y/50, label='***', size=7)+
# Within
geom_segment(aes(x =1.9, y = max_y+max_y/15, xend = 2.1, yend = max_y+max_y/15), size= 1)+ # top line
annotate('text', x=2, y=max_y+max_y/15+max_y/100, label='***', size=7)
savePlot(figure, "PostiveActivatingAffect_violin") # Display and save plot
savePlot(plot, "PostiveActivatingAffect_violin") # Display and save plot
# Try violin plots
max_y<-max(allData$VAS_PAA)
plot <- stateplot(allData, summary(emmeans0.2)$emmeans, 'VAS_PAA', 'PAA')+
# Control
# geom_segment(aes(x =1, y = max_y+max_y/50, xend = 1.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
# annotate('text', x=1.05, y=max_y + max_y/100+max_y/50, label='**', size=7)+
# geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.1, yend = max_y+max_y/15), size= 1)+ # top line
# annotate('text', x=1, y=max_y+max_y/15+max_y/100, label='***', size=7)+
# Stress
geom_segment(aes(x =2, y = max_y+max_y/50, xend = 2.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
annotate('text', x=2.05, y=max_y + max_y/100+max_y/50, label='***', size=7)+
# Within
geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.9, yend = max_y+max_y/15), size= 1)+ # top line
annotate('text', x=1.5, y=max_y+max_y/15+max_y/100, label='***', size=7)
savePlot(plot, "PostiveActivatingAffect_violin") # Display and save plot
plot <- stateplot(allData, summary(emmeans0.2)$emmeans, 'VAS_PAA', 'PAA')+
# Control
# geom_segment(aes(x =1, y = max_y+max_y/50, xend = 1.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
# annotate('text', x=1.05, y=max_y + max_y/100+max_y/50, label='**', size=7)+
# geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.1, yend = max_y+max_y/15), size= 1)+ # top line
# annotate('text', x=1, y=max_y+max_y/15+max_y/100, label='***', size=7)+
# Stress
geom_segment(aes(x =1.9, y = max_y+max_y/50, xend = 2.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
annotate('text', x=2, y=max_y + max_y/100+max_y/50, label='***', size=7)+
# Within
geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.9, yend = max_y+max_y/15), size= 1)+ # top line
annotate('text', x=1.5, y=max_y+max_y/15+max_y/100, label='***', size=7)
savePlot(plot, "PostiveActivatingAffect_violin") # Display and save plot
plot <- stateplot(allData, summary(emmeans0.2)$emmeans, 'VAS_PAA', 'PAA')+
# Control
# geom_segment(aes(x =1, y = max_y+max_y/50, xend = 1.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
# annotate('text', x=1.05, y=max_y + max_y/100+max_y/50, label='**', size=7)+
# geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.1, yend = max_y+max_y/15), size= 1)+ # top line
# annotate('text', x=1, y=max_y+max_y/15+max_y/100, label='***', size=7)+
# Stress
geom_segment(aes(x =1.9, y = max_y+max_y/50, xend = 2.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
annotate('text', x=2, y=max_y + max_y/100+max_y/50, label='***', size=7)+
# Within
geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.9, yend = max_y+max_y/15), size= 1, aes(colour = "#56B4E9"))+ # top line
annotate('text', x=1.5, y=max_y+max_y/15+max_y/100, label='***', size=7)
plot <- stateplot(allData, summary(emmeans0.2)$emmeans, 'VAS_PAA', 'PAA')+
# Control
# geom_segment(aes(x =1, y = max_y+max_y/50, xend = 1.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
# annotate('text', x=1.05, y=max_y + max_y/100+max_y/50, label='**', size=7)+
# geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.1, yend = max_y+max_y/15), size= 1)+ # top line
# annotate('text', x=1, y=max_y+max_y/15+max_y/100, label='***', size=7)+
# Stress
geom_segment(aes(x =1.9, y = max_y+max_y/50, xend = 2.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
annotate('text', x=2, y=max_y + max_y/100+max_y/50, label='***', size=7)+
# Within
geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.9, yend = max_y+max_y/15, colour = "#56B4E9"), size= 1,)+ # top line
annotate('text', x=1.5, y=max_y+max_y/15+max_y/100, label='***', size=7)
savePlot(plot, "PostiveActivatingAffect_violin") # Display and save plot
plot <- stateplot(allData, summary(emmeans0.2)$emmeans, 'VAS_PAA', 'PAA')+
# Control
# geom_segment(aes(x =1, y = max_y+max_y/50, xend = 1.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
# annotate('text', x=1.05, y=max_y + max_y/100+max_y/50, label='**', size=7)+
# geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.1, yend = max_y+max_y/15), size= 1)+ # top line
# annotate('text', x=1, y=max_y+max_y/15+max_y/100, label='***', size=7)+
# Stress
geom_segment(aes(x =1.9, y = max_y+max_y/50, xend = 2.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
annotate('text', x=2, y=max_y + max_y/100+max_y/50, label='***', size=7)+
# Within
geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.9, yend = max_y+max_y/15), size= 1, colour = "#56B4E9")+ # top line
annotate('text', x=1.5, y=max_y+max_y/15+max_y/100, label='***', size=7)
savePlot(plot, "PostiveActivatingAffect_violin") # Display and save plot
plot <- stateplot(allData, summary(emmeans0.2)$emmeans, 'VAS_PAA', 'PAA')+
# Control
# geom_segment(aes(x =1, y = max_y+max_y/50, xend = 1.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
# annotate('text', x=1.05, y=max_y + max_y/100+max_y/50, label='**', size=7)+
# geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.1, yend = max_y+max_y/15), size= 1)+ # top line
# annotate('text', x=1, y=max_y+max_y/15+max_y/100, label='***', size=7)+
# Stress
geom_segment(aes(x =1.9, y = max_y+max_y/50, xend = 2.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
annotate('text', x=2, y=max_y + max_y/100+max_y/50, label='***', size=7)+
# Within
geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.9, yend = max_y+max_y/15), size= 1, colour = "#56B4E9")+ # top line
annotate('text', x=1.5, y=max_y+max_y/15+max_y/100, label='***', size=7, colour = "#56B4E9")
savePlot(plot, "PostiveActivatingAffect_violin") # Display and save plot
if (!require(remotes)) {
install.packages("remotes")
}
remotes::install_github('jorvlan/raincloudplots')
set.seed(3)
prior <- replicate(n = 3, rnorm(n = 500, mean = 65, sd = 5))
final_single <- rnorm(n = 500, mean = 72, sd = 6)
final_multi_consistent <- rnorm(n = 500, mean = 75, sd = 7)
final_multi_inconsistent <- rnorm(n = 500, mean = 55, sd = 9)
df_2x3 <- data_2x2(
array_1 = prior[,1],
array_2 = final_single,
array_3 = prior[,2],
array_4 = final_multi_consistent,
array_5 = prior[,3],
array_6 = final_multi_inconsistent,
labels = (c('Prior Beliefs','Final Beliefs')),
jit_distance = .09,
jit_seed = 321)
colors <- rep(c("dodgerblue", "darkorange"), 3) #choose colors
raincloud_2x3_repmes(
data = df_2x3,
colors = colors,
fills = colors,
size = 1,
alpha = .6,
ort = "h") + #set to v for vertical plot
scale_x_continuous(
breaks = c(1,2,3),
limits = c(0.8, 4.3),
labels = rep("", 3)) +
ylab("Rated Beliefs") +
annotate(geom = "text",
label = "Single-Analyst",
x = 1.5, y = 42) +
annotate(geom = "text",
label = "Multi-Analyst: Consistent",
x = 2.5, y = 38) +
annotate(geom = "text",
label = "Multi-Analyst: Inconsistent",
x = 3.9, y = 38) +
annotate(geom = "text",
label = "Prior Beliefs",
x = 4.2, y = 55, size = 5,
color = "dodgerblue") +
annotate(geom = "text",
label = "vs.",
x = 4.2, y = 66, size = 5) +
annotate(geom = "text",
label = "Final Beliefs",
x = 4.2, y = 77, size = 5,
color = "darkorange") +
theme_classic() +
theme(axis.ticks.y = element_blank(),
axis.text = element_text(size = 9),
axis.title.y = element_blank())
library(raincloudplots)
install.packages("raincloudplots")
library(raincloudplots)
# https://aubreyshuga.netlify.app/post/exploring-the-raincloudplots-package-2/
library(raincloudplots)
# https://aubreyshuga.netlify.app/post/exploring-the-raincloudplots-package-2/
if (!require(remotes)) {
install.packages("remotes")
}
remotes::install_github('jorvlan/raincloudplots')
library(raincloudplots)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remotes::install_github('jorvlan/raincloudplots')
library(raincloudplots)
remotes::install_github('jorvlan/raincloudplots')
remotes::install_github('jorvlan/raincloudplots')
install.packages("remotes")
remotes::install_github('jorvlan/raincloudplots')
library(raincloudplots)
#Define colors
mentored_col = '#0B8AAD'
control_col = "#21731B"
#Mentored Group Colors
m_pre = "#52D1F4"
m_during = '#0B8AAD'
m_post = '#0B8AAD'
#Control Group Colors
c_pre = "#90cb71"
c_during = "#21731B"
c_post = "#21731B"
#Simulate data for each group
set.seed(1)
Mentored <- data.frame(Pre_1 = round(pmax(0, rnorm(100, mean=1.17, sd = .82)), 2),
During = round(pmin(4, pmax(0, rnorm(100, mean=2.6, sd = 1))), 2),
Post_1 = round(pmin(4, pmax(0, rnorm(100, mean=2.4, sd = 1))), 2),
Group = "Mentored")
Control <- data.frame(Pre_1 = round(pmax(0, rnorm(100, mean=1.07, sd = .78)), 2),
During = round(pmin(4, pmax(0, rnorm(100, mean=1.07, sd = 1))), 2),
Post_1 = round(pmin(4,pmax(0, rnorm(100, mean=1.07, sd = 1.28))), 2),
Group = "Control")
# Create Mentored Pre-Post 1x1
Mentored_pre_post <- data_1x1(
array_1 = Mentored$Pre_1, #first set of values
array_2 = Mentored$Post_1, #second set of values
jit_distance = .09,
jit_seed = 321)
# Mentored Pre-Post 1x1 raincloud plot - no ties
M_pre_post <- raincloud_1x1(
data = Mentored_pre_post,
colors = (c(m_pre, m_post)),
fills = (c(m_pre, m_post)),
size = 1.5,
alpha = .5,
ort = 'v') +
scale_x_continuous(breaks=c(1,2), labels=c("Pre 1", "Post 1"), limits=c(0, 3)) +
xlab("Semester") +
ylab("GPA") +
labs(title = "Pre and Post GPAs of Mentored Students") +
theme_classic()
M_pre_post
View(Mentored_pre_post)
# Mentored Pre-Post 1x1 raincloud plot - no ties
data = Mentored_pre_post,
# Mentored Pre-Post 1x1 raincloud plot - no ties
M_pre_post <- raincloud_1x1(
data = Mentored_pre_post,
colors = (c(m_pre, m_post)),
fills = (c(m_pre, m_post)))
M_pre_post
# Mentored Pre-Post 1x1 raincloud plot - no ties
M_pre_post <- raincloud_1x1(
data = Mentored_pre_post,
colors = (c(m_pre, m_post)),
fills = (c(m_pre, m_post)),
size = 1.5,
alpha = .5,
ort = 'v')
M_pre_post
# Mentored Pre-Post 1x1 raincloud plot - ties
M_pre_post_ties <- raincloud_1x1_repmes(
data = Mentored_pre_post,
colors = (c(m_pre, m_post)),
fills = (c(m_pre, m_post)),
line_color = 'gray',
line_alpha = .3,
size = 1.5,
alpha = .5,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre 1", "Post 1"), limits=c(0, 3)) +
xlab("Semester") +
ylab("GPA") +
labs(title = "Pre and Post GPAs of Mentored Students") +
theme_classic()
M_pre_post_ties
rlang::lest_error()
rlang::last_error()
#Create Control Pre-Post 1x1
Control_pre_post <- data_1x1(
array_1 = Control$`Pre_1`,
array_2 = Control$`Post_1`,
jit_distance = .09,
jit_seed = 321)
#Control Pre-Post 1x1 raincloud plot - no ties
C_pre_post <- raincloud_1x1(
data = Control_pre_post,
colors = (c(c_pre, c_post)),
fills = (c(c_pre, c_post)),
size = 1.5,
alpha = .5,
ort = 'v') +
scale_x_continuous(breaks=c(1,2), labels=c("Pre 1", "Post 1"), limits=c(0, 3)) +
xlab("Semester") +
ylab("GPA") +
labs(title = "Pre and Post GPAs of Opt-Out Students") +
theme_classic()
C_pre_post
