effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$lower.CL[i] * -1 # Inverted
Lower = effSummary$upper.CL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$taskType[i]), effectsize, Lower, Upper, Beta, SE, t)
}
# Speech features: Jitter ######
formula <- 'jitterLocal_sma3nz_amean ~ fileNum * taskType + (1|participantNum)' # Declare formula
dataModel = allData # Ensure correct data is taken
rm(d0.1, emmeans0.1, emmeans0.2, emm0.1, figure) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
Anova(d0.1, type = 'III')
plot(effect("fileNum:taskType", d0.1))
emmeans0.1 <- emmeans(d0.1, pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emmeans0.2 <- emmeans(d0.1, pairwise ~ taskType | fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
pairs(pairs(emmeans(d0.1, ~ fileNum | taskType)), by = NULL, adjust = "fdr")
pvalues  = append(pvalues ,summary(emmeans0.1$contrasts)$p.value) # Add pvalues to dataframe to later correct all
figure = behaviorplot(emm0.1, fileNum, taskType, "Jitter") # Create plot
figure = addpvalues(figure, emmeans0.1)
figure = addpvaluesBetween(figure, emmeans0.2)
savePlot(figure, "Jitter") # Display and save plot
figureJIT = figure
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(d0.1), edf=df.residual(d0.1)))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$taskType)){
name = 'Jitter'
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$lower.CL[i] * -1 # Inverted
Lower = effSummary$upper.CL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$taskType[i]), effectsize, Lower, Upper, Beta, SE, t)
}
# Speech features: Shimmer ######
formula <- 'shimmerLocaldB_sma3nz_amean ~ fileNum * taskType + Sex + (1|participantNum)' # Declare formula
dataModel = allData # Ensure correct data is taken
rm(d0.1, emmeans0.1, emmeans0.2, emm0.1, figure) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
Anova(d0.1, type = 'III')
plot(effect("fileNum:taskType", d0.1))
emmeans0.1 <- emmeans(d0.1, pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emmeans0.2 <- emmeans(d0.1, pairwise ~ taskType | fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
pairs(pairs(emmeans(d0.1, ~ fileNum | taskType)), by = NULL, adjust = "fdr")
pvalues  = append(pvalues ,summary(emmeans0.1$contrasts)$p.value) # Add pvalues to dataframe to later correct all
figure = behaviorplot(emm0.1, fileNum, taskType, "Shimmer") # Create plot
figure = addpvalues(figure, emmeans0.1)
figure = addpvaluesBetween(figure, emmeans0.2)
savePlot(figure, "Shimmer") # Display and save plot
figureSHIM = figure
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(d0.1), edf=df.residual(d0.1)))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$taskType)){
name = 'Shimmer'
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$lower.CL[i] * -1 # Inverted
Lower = effSummary$upper.CL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$taskType[i]), effectsize, Lower, Upper, Beta, SE, t)
}
# Speech features: HNR ######
formula <- 'HNRdBACF_sma3nz_amean ~ fileNum * taskType + Sex + (1|participantNum)' # Declare formula
dataModel = allData # Ensure correct data is taken
rm(d0.1, emmeans0.1, emmeans0.2, emm0.1, figure) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
Anova(d0.1, type = 'III')
plot(effect("fileNum:taskType", d0.1))
emmeans0.1 <- emmeans(d0.1, pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emmeans0.2 <- emmeans(d0.1, pairwise ~ taskType | fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
pairs(pairs(emmeans(d0.1, ~ fileNum | taskType)), by = NULL, adjust = "fdr")
pvalues  = append(pvalues ,summary(emmeans0.1$contrasts)$p.value) # Add pvalues to dataframe to later correct all
figure = behaviorplot(emm0.1, fileNum, taskType, "Harmonics-to-Noise Ratio") # Create plot
figure = addpvalues(figure, emmeans0.1)
figure = addpvaluesBetween(figure, emmeans0.2)
savePlot(figure, "HNR") # Display and save plot
figureHNR = figure
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(d0.1), edf=df.residual(d0.1)))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$taskType)){
name = 'HNR'
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$lower.CL[i] * -1 # Inverted
Lower = effSummary$upper.CL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$taskType[i]), effectsize, Lower, Upper, Beta, SE, t)
}
# Speech features: mean seg length ######
formula <- 'MeanVoicedSegmentLengthSec ~ fileNum * taskType + Sex + (1|participantNum)' # Declare formula
dataModel = allData # Ensure correct data is taken
rm(d0.1, emmeans0.1, emmeans0.2, emm0.1, figure) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
Anova(d0.1, type = 'III')
plot(effect("fileNum:taskType", d0.1))
emmeans0.1 <- emmeans(d0.1, pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emmeans0.2 <- emmeans(d0.1, pairwise ~ taskType | fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
pairs(pairs(emmeans(d0.1, ~ fileNum | taskType)), by = NULL, adjust = "fdr")
pvalues  = append(pvalues ,summary(emmeans0.1$contrasts)$p.value) # Add pvalues to dataframe to later correct all
figure = behaviorplot(emm0.1, fileNum, taskType, "Mean Voiced Segment Length") # Create plot
figure = addpvalues(figure, emmeans0.1)
figure = addpvaluesBetween(figure, emmeans0.2)
savePlot(figure, "MeanSegLength") # Display and save plot
figureSEG = figure
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(d0.1), edf=df.residual(d0.1)))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$taskType)){
name = 'Voiced Seg Length'
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$lower.CL[i] * -1 # Inverted
Lower = effSummary$upper.CL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$taskType[i]), effectsize, Lower, Upper, Beta, SE, t)
}
# Speech features: voiced segs per sec ######
formula <- 'VoicedSegmentsPerSec ~ fileNum * taskType + (1|participantNum)' # Declare formula
dataModel = allData # Ensure correct data is taken
rm(d0.1, emmeans0.1, emmeans0.2, emm0.1, figure) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
Anova(d0.1, type = 'III')
plot(effect("fileNum:taskType", d0.1))
emmeans0.1 <- emmeans(d0.1, pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emmeans0.2 <- emmeans(d0.1, pairwise ~ taskType | fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
pairs(pairs(emmeans(d0.1, ~ fileNum | taskType)), by = NULL, adjust = "fdr")
pvalues  = append(pvalues ,summary(emmeans0.1$contrasts)$p.value) # Add pvalues to dataframe to later correct all
figure = behaviorplot(emm0.1, fileNum, taskType, "Speech rate") # Create plot
figure = addpvalues(figure, emmeans0.1)
figure = addpvaluesBetween(figure, emmeans0.2)
savePlot(figure, "VoicedSegmensPerSec") # Display and save plot
figureSPC = figure
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(d0.1), edf=df.residual(d0.1)))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$taskType)){
name = 'Voiced Seg per Sec.'
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$lower.CL[i] * -1 # Inverted
Lower = effSummary$upper.CL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$taskType[i]), effectsize, Lower, Upper, Beta, SE, t)
}
# Speech features: Combine plots #######
figure <- ggarrange(figureF0, figureJIT, figureSHIM, figureHNR, figureSEG, figureSPC,
labels = c("A", "B", "C", "D", "E", "F"),
ncol = 2, nrow = 3,
common.legend = TRUE, legend="bottom")
savePlot(figure, "CombinedSpeech", widthval = 5000, heightval = 5700) # Display and save plot
# Correct P values SPEECH ######
names = c('F0_Cybb', 'F0_MIST', 'Jitter_Cybb', 'Jitter_MIST', 'Shimmer_Cybb', 'Shimmer_MIST',
'HNR_Cybb', 'HNR_MIST', 'MeanVoicedSegLength_Cybb', 'MeanVoicedSegLength_MIST', 'VoicedperSec_Cybb', 'VoicedperSec_MIST')
ps = list()
ps[names] = p.adjust(pvalues, method = "fdr", length(pvalues)) # Create list containing fdr corrected pvalues
collectedPvalues = ps
pvalues = c() # Empty the variable for other categories
####### Behavioral data #######
# Behavioral: NA ######
formula <- 'VAS_NA ~ fileNum * taskType + (1|participantNum)' # Declare formula
dataModel = allData # Ensure correct data is taken
rm(d0.1, emmeans0.1, emmeans0.2, emm0.1, figure) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
Anova(d0.1, type = 'III')
plot(effect("fileNum:taskType", d0.1))
emmeans0.1 <- emmeans(d0.1, pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emmeans0.2 <- emmeans(d0.1, pairwise ~ taskType | fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
pairs(pairs(emmeans(d0.1, ~ fileNum | taskType)), by = NULL, adjust = "fdr")
pvalues  = append(pvalues ,summary(emmeans0.1$contrasts)$p.value) # Add pvalues to dataframe to later correct all
# Plot
figure = behaviorplot(emm0.1, fileNum, taskType, "Negative Affect") # Create plot
figure = addpvalues(figure, emmeans0.1)
figure = addpvaluesBetween(figure, emmeans0.2)
savePlot(figure, "NegativeAffect") # Display and save plot
figureNA = figure
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(d0.1), edf=df.residual(d0.1)))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$taskType)){
name = 'Negative Affect'
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$lower.CL[i] * -1 # Inverted
Lower = effSummary$upper.CL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$taskType[i]), effectsize, Lower, Upper, Beta, SE, t)
}
# Behavioral: Stress ######
formula <- 'VAS_Stress ~ fileNum * taskType + Sex + (1|participantNum)' # Declare formula
dataModel = allData # Ensure correct data is taken
rm(d0.1, emmeans0.1, emmeans0.2, emm0.1, figure) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
Anova(d0.1, type = 'III')
plot(effect("fileNum:taskType", d0.1))
emmeans0.1 <- emmeans(d0.1, pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emmeans0.2 <- emmeans(d0.1, pairwise ~ taskType | fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
pairs(pairs(emmeans(d0.1, ~ fileNum | taskType)), by = NULL, adjust = "fdr")
pvalues  = append(pvalues ,summary(emmeans0.1$contrasts)$p.value) # Add pvalues to dataframe to later correct all
# Plot
figure = behaviorplot(emm0.1, fileNum, taskType, "Stress") # Create plot
figure = addpvalues(figure, emmeans0.1)
figure = addpvaluesBetween(figure, emmeans0.2)
savePlot(figure, "Stress") # Display and save plot
figureS = figure
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(d0.1), edf=df.residual(d0.1)))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$taskType)){
name = 'Stress'
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$lower.CL[i] * -1 # Inverted
Lower = effSummary$upper.CL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$taskType[i]), effectsize, Lower, Upper, Beta, SE, t)
}
# Behavioural: Combine plots #######
figure <- ggarrange(figureNA, figureS,
labels = c("A", "B"),
ncol = 2, nrow = 1,
common.legend = TRUE, legend="bottom")
savePlot(figure, "CombinedSelfReports", widthval = 5000, heightval = 1900) # Display and save plot
# Correct P values SELF-REPORT ######
names = c('NA_Cybb', 'NA_MIST', 'Stress_Cybb', 'Stress_MIST')
ps = list()
ps[names] = p.adjust(pvalues, method = "fdr", length(pvalues)) # Create list containing fdr corrected pvalues
collectedPvalues = append(collectedPvalues, ps)
pvalues = c() # Empty the variable for other categories
####### Physiological data #######
# Physiological: SCRR - response rate ######
formula <- 'SCRR ~ fileNum * taskType + (1|participantNum)' # Declare formula
dataModel = allData # Ensure correct data is taken
rm(d0.1, emmeans0.1, emmeans0.2, emm0.1, figure) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
Anova(d0.1, type = 'III')
plot(effect("fileNum:taskType", d0.1))
emmeans0.1 <- emmeans(d0.1, pairwise ~ fileNum | taskType, adjust ="none", type = "response") #we don't adjust because we do this later
emmeans0.2 <- emmeans(d0.1, pairwise ~ taskType | fileNum, adjust ="none", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
pairs(pairs(emmeans(d0.1, ~ fileNum | taskType)), by = NULL, adjust = "fdr")
collectedPvalues = append(collectedPvalues, summary(emmeans0.1$contrasts)$p.value)
# Plot
figure = behaviorplot(emm0.1, fileNum, taskType, "SCRR") # Create plot
figure = addpvalues(figure, emmeans0.1)
figure = addpvaluesBetween(figure, emmeans0.2)
savePlot(figure, "SCRR") # Display and save plot
figureSCRR = figure
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(d0.1), edf=df.residual(d0.1)))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$taskType)){
name = 'SCRR'
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$lower.CL[i] * -1 # Inverted
Lower = effSummary$upper.CL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$taskType[i]), effectsize, Lower, Upper, Beta, SE, t)
}
####################
# Audio Sample descriptives #######
t.first <- allData[match(unique(allData$participantNum), allData$participantNum),] # Create dataframe with one line per unique participant
sprintf("Number of participants: %.f", nrow(t.first))
sprintf("Number of Men: %.f. Number of Women: %.f.", sum(t.first$Sex == 'Man') , sum(t.first$Sex == 'Vrouw'))
sprintf("Age, Mean: %.2f, SD: %.2f.", mean(t.first$Age) , sd(t.first$Age))
# Now more specific
sum(allData$fileNum == 'Control Task')
sum(allData$fileNum == 'Control Task' & allData$taskType == 'Cyberball')
sum(allData$fileNum == 'Control Task' & allData$taskType == 'MIST')
length(unique(allData$participantNum[allData$fileNum == 'Control Task']))
sum(allData$fileNum == 'Stress Task')
sum(allData$fileNum == 'Stress Task' & allData$taskType == 'Cyberball')
sum(allData$fileNum == 'Stress Task' & allData$taskType == 'MIST')
length(unique(allData$participantNum[allData$fileNum == 'Stress Task']))
# Forest Plot ####
# https://stackoverflow.com/questions/58657802/forest-plot-with-subgroups-in-ggplot2
library('ggplot2')
# Sort for visual preference
backup = forestdf
# forestdf = forestdf[order(forestdf$Group,decreasing=TRUE),]
# you can do the factoring here
forestdf$Outcome = factor(forestdf$Outcome, levels = c("Jitter", "Shimmer", "HNR", "Voiced Seg Length", "Voiced Seg per Sec.", "F0",
"Stress", "Negative Affect",
"SCRR"
))
# Make them numeric
forestdf$effectsize = round(as.numeric(forestdf$effectsize), digits = 2)
forestdf$Lower = round(as.numeric(forestdf$Lower), digits = 2)
forestdf$Upper = round(as.numeric(forestdf$Upper), digits = 2)
forestdf$Beta = round(as.numeric(forestdf$Beta), digits = 2)
forestdf$SE = round(as.numeric(forestdf$SE), digits = 2)
forestdf$t = round(as.numeric(forestdf$t), digits = 2)
forestdf$pvalues = round(as.numeric(collectedPvalues), digits = 3)
#define colours for dots and bars
# dotCOLS = c("#a6d8f0","#f9b282") # these are actually the bars
barCOLS = c("#008fd5","#de6b35")
dotCOLS = c("#56B4E9", "#E69F00")
boxlims = c(0.5, 6.5, 10.5, 12.5)
removevars = 1
if(removevars == 1){
backup = forestdf
# boxlims = c(0.5, 1.5, 3.5, 9.5)
boxlims = c(0.5, 6.5, 8.5, 9.5)
}
dodgevar = 0.5
forestplot <- ggplot(forestdf, aes(x=Outcome, y=effectsize, ymin=Upper, ymax=Lower,col=Group,fill=Group, group=Group)) +
# Draw some background rectangles to indicate different categories
geom_rect(aes(xmin = boxlims[1], xmax = boxlims[2], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
geom_rect(aes(xmin = boxlims[2], xmax = boxlims[3], ymin = -Inf, ymax = Inf),
fill = "gray96", alpha = 0.2, linetype = "blank") +
geom_rect(aes(xmin = boxlims[3], xmax = boxlims[4], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
#specify position here
geom_linerange(size=8,position=position_dodge(width = dodgevar)) +
geom_hline(yintercept=0, lty=2) +
#specify position here too + color for significance
# geom_point(size=4, shape=21, colour= ifelse(forestdf$Lower < 0 & forestdf$Upper < 0 | forestdf$Lower > 0 & forestdf$Upper > 0, "black", "white"),
#            stroke = 1.4, position=position_dodge(width = dodgevar)) +
geom_point(size=4, shape=21, colour= ifelse(forestdf$pvalues < .05, "black", "white"),
stroke = 1.4, position=position_dodge(width = dodgevar)) +
scale_fill_manual(values=barCOLS)+
scale_color_manual(values=dotCOLS)+
scale_x_discrete(name="") +
# scale_y_continuous(limits = NULL)+
coord_flip()+
theme_pubr() +
plot_theme_apa()+
xlab("My X-Axis Label") +
theme(legend.position = "bottom", legend.text = element_text(size = 18), legend.title = element_text(size = 18))
# Add the categories
forestplot <- forestplot +
geom_segment(aes(x = boxlims[1]+.05, xend = boxlims[2]-.05, y = 1.35, yend = 1.35), color = "black", arrow = arrow(length = unit(0.4, "cm"), end = "both", type = "closed")) +
geom_text(aes(x = mean(boxlims[1:2]), y = 1.4, label = "Speech"), color = "black", angle = 270) +
geom_segment(aes(x = boxlims[2]+.05, xend = boxlims[3]-.05, y = 1.35, yend = 1.35), color = "black", arrow = arrow(length = unit(0.4, "cm"), end = "both", type = "closed")) +
geom_text(aes(x = mean(boxlims[2:3]), y = 1.4, label = "Self-reports"), color = "black", angle = 270) +
geom_segment(aes(x = boxlims[3]+.05, xend = boxlims[4]-.05, y = 1.35, yend = 1.35), col = "black", arrow = arrow(length = unit(0.4, "cm"), end = "both", type = "closed")) +
geom_text(aes(x = mean(boxlims[3:4]), y = 1.4, label = "Physiological"), col = "black", angle = 270)
# Remove dots in legend
forestplot <- forestplot + guides(fill = guide_legend(override.aes = list(shape = NA, size = 0)))
forestplot
forestplot + xlab("My X-Axis Label")
forestplot + ylab("My X-Axis Label")
forestplot <- ggplot(forestdf, aes(x=Outcome, y=effectsize, ymin=Upper, ymax=Lower,col=Group,fill=Group, group=Group)) +
# Draw some background rectangles to indicate different categories
geom_rect(aes(xmin = boxlims[1], xmax = boxlims[2], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
geom_rect(aes(xmin = boxlims[2], xmax = boxlims[3], ymin = -Inf, ymax = Inf),
fill = "gray96", alpha = 0.2, linetype = "blank") +
geom_rect(aes(xmin = boxlims[3], xmax = boxlims[4], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
#specify position here
geom_linerange(size=8,position=position_dodge(width = dodgevar)) +
geom_hline(yintercept=0, lty=2) +
#specify position here too + color for significance
# geom_point(size=4, shape=21, colour= ifelse(forestdf$Lower < 0 & forestdf$Upper < 0 | forestdf$Lower > 0 & forestdf$Upper > 0, "black", "white"),
#            stroke = 1.4, position=position_dodge(width = dodgevar)) +
geom_point(size=4, shape=21, colour= ifelse(forestdf$pvalues < .05, "black", "white"),
stroke = 1.4, position=position_dodge(width = dodgevar)) +
scale_fill_manual(values=barCOLS)+
scale_color_manual(values=dotCOLS)+
scale_x_discrete(name="") +
# scale_y_continuous(limits = NULL)+
coord_flip()+
theme_pubr() +
plot_theme_apa()+
ylab("Effect Size (Cohen's D)") + # Plot is flipped, this is actually the x-axis
theme(legend.position = "bottom", legend.text = element_text(size = 18), legend.title = element_text(size = 18))
# Add the categories
forestplot <- forestplot +
geom_segment(aes(x = boxlims[1]+.05, xend = boxlims[2]-.05, y = 1.35, yend = 1.35), color = "black", arrow = arrow(length = unit(0.4, "cm"), end = "both", type = "closed")) +
geom_text(aes(x = mean(boxlims[1:2]), y = 1.4, label = "Speech"), color = "black", angle = 270) +
geom_segment(aes(x = boxlims[2]+.05, xend = boxlims[3]-.05, y = 1.35, yend = 1.35), color = "black", arrow = arrow(length = unit(0.4, "cm"), end = "both", type = "closed")) +
geom_text(aes(x = mean(boxlims[2:3]), y = 1.4, label = "Self-reports"), color = "black", angle = 270) +
geom_segment(aes(x = boxlims[3]+.05, xend = boxlims[4]-.05, y = 1.35, yend = 1.35), col = "black", arrow = arrow(length = unit(0.4, "cm"), end = "both", type = "closed")) +
geom_text(aes(x = mean(boxlims[3:4]), y = 1.4, label = "Physiological"), col = "black", angle = 270)
# Remove dots in legend
forestplot <- forestplot + guides(fill = guide_legend(override.aes = list(shape = NA, size = 0)))
savePlot(forestplot, "forestPlot", widthval = 2600, heightval = 3000) # Display and save plot
forestplot <- ggplot(forestdf, aes(x=Outcome, y=effectsize, ymin=Upper, ymax=Lower,col=Group,fill=Group, group=Group)) +
# Draw some background rectangles to indicate different categories
geom_rect(aes(xmin = boxlims[1], xmax = boxlims[2], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
geom_rect(aes(xmin = boxlims[2], xmax = boxlims[3], ymin = -Inf, ymax = Inf),
fill = "gray96", alpha = 0.2, linetype = "blank") +
geom_rect(aes(xmin = boxlims[3], xmax = boxlims[4], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
#specify position here
geom_linerange(size=8,position=position_dodge(width = dodgevar)) +
geom_hline(yintercept=0, lty=2) +
geom_point(size=4, shape=21, colour= ifelse(forestdf$pvalues < .05, "black", "white"),
stroke = 1.4, position=position_dodge(width = dodgevar)) +
scale_fill_manual(values=barCOLS)+
scale_color_manual(values=dotCOLS)+
scale_x_discrete(name="")
forestplot
forestplot <- ggplot(forestdf, aes(x=Outcome, y=effectsize, ymin=Upper, ymax=Lower,col=Group,fill=Group, group=Group)) +
# Draw some background rectangles to indicate different categories
geom_rect(aes(xmin = boxlims[1], xmax = boxlims[2], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
geom_rect(aes(xmin = boxlims[2], xmax = boxlims[3], ymin = -Inf, ymax = Inf),
fill = "gray96", alpha = 0.2, linetype = "blank") +
geom_rect(aes(xmin = boxlims[3], xmax = boxlims[4], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
#specify position here
geom_linerange(size=8,position=position_dodge(width = dodgevar)) +
geom_hline(yintercept=0, lty=2) +
geom_point(size=4, shape=21, colour= ifelse(forestdf$pvalues < .05, "black", "white"),
stroke = 1.4, position=position_dodge(width = dodgevar)) +
scale_fill_manual(values=barCOLS)+
scale_color_manual(values=dotCOLS)+
scale_x_discrete(name="") +
# scale_y_continuous(limits = NULL)+
coord_flip()+
theme_pubr()
forestplot
forestplot <- ggplot(forestdf, aes(x=Outcome, y=effectsize, ymin=Upper, ymax=Lower,col=Group,fill=Group, group=Group)) +
# Draw some background rectangles to indicate different categories
geom_rect(aes(xmin = boxlims[1], xmax = boxlims[2], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
geom_rect(aes(xmin = boxlims[2], xmax = boxlims[3], ymin = -Inf, ymax = Inf),
fill = "gray96", alpha = 0.2, linetype = "blank") +
geom_rect(aes(xmin = boxlims[3], xmax = boxlims[4], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
#specify position here
geom_linerange(size=8,position=position_dodge(width = dodgevar)) +
geom_hline(yintercept=0, lty=2) +
#specify position here too + color for significance
# geom_point(size=4, shape=21, colour= ifelse(forestdf$Lower < 0 & forestdf$Upper < 0 | forestdf$Lower > 0 & forestdf$Upper > 0, "black", "white"),
#            stroke = 1.4, position=position_dodge(width = dodgevar)) +
geom_point(size=4, shape=21, colour= ifelse(forestdf$pvalues < .05, "black", "white"),
stroke = 1.4, position=position_dodge(width = dodgevar)) +
scale_fill_manual(values=barCOLS)+
scale_color_manual(values=dotCOLS)+
scale_x_discrete(name="") +
scale_y_continuous(limits = c(-3, 3)) +
# scale_y_continuous(limits = NULL)+
coord_flip()+
theme_pubr() +
plot_theme_apa()+
ylab("Effect Size (Cohen's D)") + # Plot is flipped, this is actually the x-axis
theme(legend.position = "bottom", legend.text = element_text(size = 18), legend.title = element_text(size = 18))
forestplot
forestplot <- ggplot(forestdf, aes(x=Outcome, y=effectsize, ymin=Upper, ymax=Lower,col=Group,fill=Group, group=Group)) +
# Draw some background rectangles to indicate different categories
geom_rect(aes(xmin = boxlims[1], xmax = boxlims[2], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
geom_rect(aes(xmin = boxlims[2], xmax = boxlims[3], ymin = -Inf, ymax = Inf),
fill = "gray96", alpha = 0.2, linetype = "blank") +
geom_rect(aes(xmin = boxlims[3], xmax = boxlims[4], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
#specify position here
geom_linerange(size=8,position=position_dodge(width = dodgevar)) +
geom_hline(yintercept=0, lty=2) +
#specify position here too + color for significance
# geom_point(size=4, shape=21, colour= ifelse(forestdf$Lower < 0 & forestdf$Upper < 0 | forestdf$Lower > 0 & forestdf$Upper > 0, "black", "white"),
#            stroke = 1.4, position=position_dodge(width = dodgevar)) +
geom_point(size=4, shape=21, colour= ifelse(forestdf$pvalues < .05, "black", "white"),
stroke = 1.4, position=position_dodge(width = dodgevar)) +
scale_fill_manual(values=barCOLS)+
scale_color_manual(values=dotCOLS)+
scale_x_discrete(name="") +
scale_y_continuous(limits = c(-1, 1.5)) +
# scale_y_continuous(limits = NULL)+
coord_flip()+
theme_pubr() +
plot_theme_apa()+
ylab("Effect Size (Cohen's D)") + # Plot is flipped, this is actually the x-axis
theme(legend.position = "bottom", legend.text = element_text(size = 18), legend.title = element_text(size = 18))
# Add the categories
forestplot <- forestplot +
geom_segment(aes(x = boxlims[1]+.05, xend = boxlims[2]-.05, y = 1.35, yend = 1.35), color = "black", arrow = arrow(length = unit(0.4, "cm"), end = "both", type = "closed")) +
geom_text(aes(x = mean(boxlims[1:2]), y = 1.4, label = "Speech"), color = "black", angle = 270) +
geom_segment(aes(x = boxlims[2]+.05, xend = boxlims[3]-.05, y = 1.35, yend = 1.35), color = "black", arrow = arrow(length = unit(0.4, "cm"), end = "both", type = "closed")) +
geom_text(aes(x = mean(boxlims[2:3]), y = 1.4, label = "Self-reports"), color = "black", angle = 270) +
geom_segment(aes(x = boxlims[3]+.05, xend = boxlims[4]-.05, y = 1.35, yend = 1.35), col = "black", arrow = arrow(length = unit(0.4, "cm"), end = "both", type = "closed")) +
geom_text(aes(x = mean(boxlims[3:4]), y = 1.4, label = "Physiological"), col = "black", angle = 270)
# Remove dots in legend
forestplot <- forestplot + guides(fill = guide_legend(override.aes = list(shape = NA, size = 0)))
savePlot(forestplot, "forestPlot", widthval = 2600, heightval = 3000) # Display and save plot
session.info()
session.info
# Get session information
sessionInfo()
